<?php namespace ProcessWire;

class FieldtypeSelectImage extends Fieldtype {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Select Image',
			'summary' => 'Allows the selection of a single image from any of the image fields on the current page.',
			'version' => '0.2.4',
			'author' => 'Robin Sallis',
			'href' => 'https://github.com/Toutouwai/FieldtypeSelectImage',
			'icon' => 'image',
			'requires' => 'ProcessWire>=3.0.0',
			'installs' => 'InputfieldSelectImage',
		);
	}

	/**
	 * Get inputfield
	 *
	 * @param Page $page
	 * @param Field $fields
	 * @return InputfieldSelectImage
	 */
	public function getInputfield(Page $page, Field $fields) {
		/* @var InputfieldSelectImage $inputfield */
		$inputfield = $this->wire()->modules->InputfieldSelectImage;
		$options = $this->getImageOptions($page);
		foreach($options as $option) {
			$inputfield->addOption(
				$option['data'],
				$option['label'],
				['data-img-src' => $option['thumb']]
			);
		}
		return $inputfield;
	}

	/**
	 * Get options for select field
	 *
	 * @param Page $page
	 * @return array
	 */
	public function getImageOptions(Page $page) {
		if(!$page->fields) return [];
		$options = [];
		foreach($page->fields as $field) {
			if($field->type instanceof FieldtypeImage) {
				foreach($page->$field as $image) {
					/* @var Pageimage $image */
					if($image->isTemp()) continue;
					$options[] = [
						'label' => $image->basename,
						'thumb' => $image->height(260)->url,
						'data' => "{$field->name}|{$image->basename}"
					];
				}
			}
		}
		return $options;
	}

	/**
	 * Get database schema
	 *
	 * @param Field $field
	 * @return array
	 */
	public function getDatabaseSchema(Field $field) {
		$schema = parent::getDatabaseSchema($field);
		$schema['data'] = 'text NOT NULL';
		$schema['keys']['data_exact'] = 'KEY `data_exact` (`data`(255))';
		$schema['keys']['data'] = 'FULLTEXT KEY `data` (`data`)';
		return $schema;
	}

	/**
	 * Sanitize value
	 *
	 * @param Page $page
	 * @param Field $field
	 * @param $value
	 * @return Pageimage|string
	 */
	public function sanitizeValue(Page $page, Field $field, $value) {
		if(is_string($value) && strpos($value, '|') !== false) {
			list($field_name, $image_name) = explode('|', $value);
			$value = $page->$field_name->get("name=$image_name");
		}
		if(!is_object($value) || $value->className() !== 'Pageimage') $value = '';
		return $value;
	}

	/**
	 * Wakeup value
	 *
	 * @param Page $page
	 * @param Field $field
	 * @param $value
	 * @return Pageimage|string
	 */
	public function ___wakeupValue(Page $page, Field $field, $value) {
		if(strpos($value, '|') !== false) {
			list($field_name, $image_name) = explode('|', $value);
			$value = $page->template->hasField($field_name) ? $page->getUnformatted($field_name)->get("name=$image_name") : null;
		}
		return $value;
	}

	/**
	 * Sleep value
	 *
	 * @param Page $page
	 * @param Field $field
	 * @param $value
	 * @return string
	 */
	public function ___sleepValue(Page $page, Field $field, $value) {
		if(is_object($value)) {
			$field_name = '';
			foreach($page->fields as $field) {
				if($field->type instanceof FieldtypeImage) {
					if($page->get($field->name)->has("name={$value->basename}")) {
						$field_name = $field->name;
					}
				}
			}
			$image_name = $value->basename;
			$value = "{$field_name}|{$image_name}";
		}
		return (string) $value;
	}

}
